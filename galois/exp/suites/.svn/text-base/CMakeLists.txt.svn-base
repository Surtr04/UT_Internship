include_directories(include)
#add_subdirectory(lib)

if(EXP_DOALL STREQUAL "GALOIS") 
  if(HAS_CXX0X_LAMBDA)
    add_definitions(-DEXP_DOALL_GALOIS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX0X_FLAGS}")
    set(LIBS ${RT_LINK} galois)
  else()
    message(FATAL_ERROR "Asked for GALOIS but C++ lambda support not found")
  endif()
elseif(EXP_DOALL STREQUAL "PTHREAD")
  add_definitions(-DEXP_DOALL_PTHREAD)
  set(LIBS pthread)
elseif(EXP_DOALL STREQUAL "DTHREAD")
  add_definitions(-DEXP_DOALL_PTHREAD)
  set(LIBS /net/maxwell/workspace/ddn/build/dthreads/libdthread.so dl)
elseif(EXP_DOALL STREQUAL "DMP" OR EXP_DOALL STREQUAL "DMP_BS") 
  STRING(REGEX REPLACE "-std=c\\+\\+11" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
  remove_definitions(-std=c++11)
  if (EXP_DOALL STREQUAL "DMP_BS")
    add_definitions(-DGALOIS_USE_DMP_BS)
  endif()
  add_definitions(-DEXP_DOALL_PTHREAD)
  add_definitions(-DGALOIS_USE_DMP)
  add_definitions(-emit-llvm)
  include_directories(lib/dmpruntime)
  set(OLD_CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER})
  set(CMAKE_CXX_COMPILER ${CMAKE_CURRENT_SOURCE_DIR}/scripts/dmp-c++)
  set(LIBS rt dl pthread)
elseif(EXP_DOALL STREQUAL "CILK")
  if(HAVE_CILK)
    add_definitions(-DEXP_DOALL_CILK)
  else()
    message(FATAL_ERROR "Asked for CILK but CILK not found")
  endif()
elseif(EXP_DOALL STREQUAL "TBB")
  if(TBB_FOUND)
    if(HAS_CXX0X_LAMBDA)
      add_definitions(-DEXP_DOALL_TBB)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX0X_FLAGS}")
    else()
      message(FATAL_ERROR "Asked for TBB but C++ lambda support not found")
    endif()
  else()
    message(FATAL_ERROR "Asked for TBB but TBB not found")
  endif()
elseif(EXP_DOALL STREQUAL "OPENMP" OR EXP_DOALL STREQUAL "OPENMP_RUNTIME" OR EXP_DOALL STREQUAL "PTHREAD_OPENMP")
  if(OPENMP_FOUND)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    if (EXP_DOALL STREQUAL "OPENMP")
      add_definitions(-DEXP_DOALL_OPENMP)
    elseif(EXP_DOALL STREQUAL "OPENMP_RUNTIME")
      add_definitions(-DEXP_DOALL_OPENMP_RUNTIME)
    else()
      add_definitions(-DEXP_DOALL_PTHREAD_OPENMP)
    endif()
  else()
    message(FATAL_ERROR "Asked for OPENMP but OPENMP was not found")
  endif()
else()
  message(FATAL_ERROR "Unknown DO_ALL type ${EXP_DOALL}")
endif()

add_custom_target(more-suites)

include(ParseArguments)

set(Parallel ${CMAKE_CURRENT_SOURCE_DIR}/src/Parallel.cpp)
if(GALOIS_USE_VTUNE)
  add_definitions(-DGALOIS_USE_VTUNE)
endif()
file(GLOB DMPRUNTIME ${CMAKE_CURRENT_SOURCE_DIR}/lib/dmpruntime/*.cpp)
set(HOARD ${CMAKE_CURRENT_SOURCE_DIR}/lib/dmpruntime/libhoard/src/libhoard.cpp)

### Creates a real library instead of going through DMP route
function(addsuitelibrary target)
  if(OLD_CMAKE_CXX_COMPILER)
    remove_definitions(-emit-llvm)
    set(CMAKE_CXX_COMPILER ${OLD_CMAKE_CXX_COMPILER} PARENT_SCOPE)
  endif()
  add_library(${target} ${ARGN})
endfunction()

function(addsuite target)
  PARSE_ARGUMENTS(ADDSUITE "EXTLIBS" "" ${ARGN})
  # Statically link everything to enable DMP compilation
  if(EXP_DOALL STREQUAL "DMP" OR EXP_DOALL STREQUAL "DMP_BS")
    add_executable(${target} ${ADDSUITE_DEFAULT_ARGS} ${Parallel} ${DMPRUNTIME})
  else()
    add_executable(${target} ${ADDSUITE_DEFAULT_ARGS} ${Parallel})
  endif()
  if(VTUNE_FOUND)
    target_link_libraries(${target} ${VTUNE_LIBRARIES})
  endif()
  target_link_libraries(${target} ${LIBS} ${ADDSUITE_EXTLIBS})
  add_dependencies(more-suites ${target})
  set_target_properties(${target} PROPERTIES EXCLUDE_FROM_ALL true)
endfunction()

add_custom_target(more-suites-inputs)

add_subdirectory(pbbs-0.1)
#add_subdirectory(splash2)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/parsec-2.1")
  add_subdirectory(parsec-2.1)
else()
  message("Missing parsec-2.1 suite; run download_external.sh to download")
endif()
