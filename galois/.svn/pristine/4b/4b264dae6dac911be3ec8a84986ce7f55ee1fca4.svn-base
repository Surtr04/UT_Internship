#!/usr/bin/env python

import subprocess
import os
import sys
import tempfile

BASE = '/net/maxwell/workspace/ddn/build/coredet/ext-install/llvm/bin'
STUB = '/net/maxwell/workspace/ddn/build/coredet/compiler/runtime/static-ctor.bc'
LIB = '/net/maxwell/workspace/ddn/build/coredet/ext-install/llvm/lib'
PASSES = ['%s/libLLVM%s.so' % (LIB, x) for x in ['DataStructure', 'MakeDeterministic']]
AS = '/usr/bin/as'
OPT = '%s/opt' % BASE
CXX = '%s/llvm-g++' % BASE
LINK = '%s/llvm-link' % BASE
LD = '%s/llvm-ld' % BASE
LLC = '%s/llc' % BASE

OPTARGS = []
for x in PASSES:
  OPTARGS += ['-load', x]
# Common
#OPTARGS += ['-basicaa', '-libcall-aa', '-anders-aa', '-ds-aa', '-std-compile-opts', '-stats']
OPTARGS += ['-basicaa', '-libcall-aa', '-ds-aa', '-std-compile-opts']
OPTARGS += ['-no-pthreads', '-makedeterministic', '-dmp=true']
# No memory tracking
OPTARGS += ['-dmp-do-load-track=false', '-dmp-do-store-track=false']
OPTARGS += ['-dmp-ignore-external-calls=true']
#OPTARGS += ['-dmp-memtrack-for-buffering=true']
#OPTARGS += ['-dmp-memtrack-for-buffering=true', '-dmp-do-memtrack-parallel-malloc=true', '-dmp-do-memtrack-hoard-malloc=true']
# Optimizations?
OPTARGS += ['-dmp-do-escapeopt=true']
OPTARGS += ['-dmp-quantum-balance=heuristic', '-dmp-heuristic-balance-thresh=3']
#OPTARGS += ['-dmp-quantum-balance=maximal']
#OPTARGS += ['-dmp-quantum-balance=minimal']
OPTARGS += ['-dmp-mot-blocksize=64']

args = sys.argv[1:]
# Pass through command when we are just compiling
if '-emit-llvm' in args:
  os.execv(CXX, [CXX] + args)

objs = [x for x in args if x.endswith('.o')]
rest = [x for x in args if not x.endswith('.o')]

def call(x):
  #print('---- %s' % ' '.join(x))
  subprocess.check_call(x)

with tempfile.NamedTemporaryFile(delete=True) as ftobjs:
  dmpobjs = [x for x in objs if x.find('/dmpruntime/') >= 0]
  tobjs = [x for x in objs if not x.find('/dmpruntime/') >= 0]
  # Link non-runtime targets together to run deterministic pass
  call([LINK, '-f', '-o', ftobjs.name] + tobjs)
  with tempfile.NamedTemporaryFile(delete=True) as ftobjs_opt:
    call([OPT] + OPTARGS + [ftobjs.name, '-o', ftobjs_opt.name, '-f'])
    with tempfile.NamedTemporaryFile(delete=True) as fall:
      # Link runtime targets and non-runtime targets together
      call([LINK, '-f', '-o', fall.name, ftobjs_opt.name] + dmpobjs + [STUB])
      with tempfile.NamedTemporaryFile(delete=True) as fall_opt:
        # Optimize everything
        call([OPT, '-std-compile-opts', fall.name, '-o', fall_opt.name, '-f'])
        with tempfile.NamedTemporaryFile(delete=True) as fall_opt_asm:
          # Generate asm
          call([LLC, '-f', '-o', fall_opt_asm.name, fall_opt.name])
          with tempfile.NamedTemporaryFile(delete=True) as fall_opt_obj:
            # Generate obj and link
            call([AS, '-o', fall_opt_obj.name, fall_opt_asm.name])
            call([CXX, fall_opt_obj.name] + rest)
