#!/usr/bin/env bash

### Replace the following lines from the experiment.header file
#############################################################################################
#############################################################################################
experiment[0]="--event PAPI_TOT_CYC:10000079 --event PAPI_LD_INS:5000011 --event PAPI_L2_DCA:500009 --event PAPI_L2_ICA:500029 --event PAPI_L2_ICM:500041 --event PAPI_L2_TCM:500057 --event PAPI_TLB_IM:100003 --event PAPI_BR_INS:500069 --event PAPI_TOT_INS:10000019"
experiment[1]="--event PAPI_BR_MSP:500083 --event PAPI_FDV_INS:5000077 --event DTLB_LOAD_MISSES:CAUSES_A_WALK:100019 --event DTLB_STORE_MISSES:CAUSES_A_WALK:100043 --event FP_COMP_OPS_EXE:SSE_FP_PACKED_DOUBLE:5000087 --event FP_COMP_OPS_EXE:SSE_PACKED_SINGLE:5000111 --event ICACHE:5000153 --event SIMD_FP_256:PACKED_SINGLE:5000161 --event PAPI_TOT_INS:10000019"
experiment[2]="--event FP_COMP_OPS_EXE:SSE_FP_SCALAR_SINGLE:SSE_SCALAR_DOUBLE:5000201 --event PAPI_TOT_INS:10000019 --event LLC_MISSES:500083 --event LLC_REFERENCES:5000077"

#############################################################################################
#############################################################################################

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

######## Do not edit anything below this line ########

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

showHelp()
{
	echo "Usage: `basename ${0}` [OPTION...] program-name [arguments]"
	echo "Program to gather measurements for use with PerfExpert"
	echo
	echo -e "  -s, --structure FILE\t\tUse FILE as program structure (generated by hpcstruct)"
	echo -e "  -o, --output FILE.xml\t\tSave measurements to FILE.xml"
	echo -e "  -n, --no-debug\t\tDo not switch to debug mode if program fails to execute with PerfExpert"
}

hpctoolkit_location=${PERFEXPERT_HPCTOOLKIT_HOME}

if [ "x${hpctoolkit_location}" == "x" ]
then
	echo "Could not find PERFEXPERT_HPCTOOLKIT_HOME defined as an environment variable, exiting..."
	exit 1
fi

HPCTOOLKIT_BIN=${hpctoolkit_location}/bin

for arg
do
	delim=""
	case "$arg" in
		# translate GNU long options to short options
		--structure)	args="${args}-s ";;
		--output)	args="${args}-o ";;
		--no-debug)	args="${args}-n ";;
		--help)		args="${args}-h ";;

		# pass through anything else
		*) [[ "${arg:0:1}" == "-" ]] || delim="\""
		args="${args}${delim}${arg}${delim} ";;
	esac
done

# Reset the positional parameters to the short options
eval set -- $args

debug=true
structure=""
structureSet=false

# Generate output filename
output_filename="experiment-${JOB_NAME}.o${JOB_ID}.xml"
if [ "x${JOB_NAME}" == "x" ]
then
	output_filename="experiment.xml"
fi

while getopts ":s:o:nh" option 2>/dev/null
do
	case $option in
		s)
		structure="${OPTARG[@]}"
		structureSet=true
		;;

		o)
		output_filename="${OPTARG[@]}"
		;;

		n)
		debug=false
		;;

		h)
		showHelp
		exit 1
		;;

		*)
		echo "Unrecognized option: ${OPTARG}"
		exit 1
		;;
	esac
done
shift $(($OPTIND - 1))

command=${*}

# Sanity checks
if [ ${#} -lt 1 ]
then
	showHelp
	exit 1
fi

if [ "${structureSet}" == "true" ]
then
	hpcstruct_file=${structure}
	if [ ! -f ${hpcstruct_file} ]
	then
		echo "Could not find hpcstruct file: ${hpcstruct_file}, try entering the absolute path"
		exit 1
	fi

	echo "PerfExpert: Using existing structure file: ${hpcstruct_file}"
fi

program_name=${1}

arguments=""
shift
if [ "x${*}" != "x" ]
then
	arguments=${*}
fi

# If it is in ${PATH}, form the absolute path
fullPath=`which ${program_name} 2>/dev/null`
if [ ${?} -ne 0 ]
then
	# Try checking if the file is in the current directory
	if [ -x ./${program_name} ]
	then
		fullPath=./${program_name}
	else
		# Instead of raising an error, use the program name as it is
		fullPath=${program_name}
	fi
fi

# Set the original variable back
program_name=${fullPath}

if [ ! -f ${program_name} ]
then
	echo "Could not run file: ${program_name}, try entering the absolute path"
	exit 1
fi

# Put everything into a temporary directory instead of clobbering the working directory
tempDir=`mktemp -d .perfexpert-temp-XXXXXXX`

# If for some reason tempDir was not set, set it to a default
if [ "x${tempDir}" == "x" ]
then
        tempDir=".perfexpert-temp"
        mkdir "${tempDir}"
fi

# Just to be sure, we remove any files which might previously exist
rm -rf ${tempDir}/*

# Check if we received the HPCStruct file as a parameter
if [ "x${hpcstruct_file}" != "x" ]
then
	# If yes, use it
	cp ${hpcstruct_file} ${tempDir}/hpcstruct
else
	# Else generate it
	echo -n "PerfExpert: Generating program structure using hpcstruct..."
	${HPCTOOLKIT_BIN}/hpcstruct --output ${tempDir}/hpcstruct ${program_name}
	echo "done!"
fi

# If anything goes bad, here is where we dump the information
debug_file="perfexpert_debug.out"

# Run experiments with different configurations
for index in $(seq 0 $((${#experiment[@]}-1)))
do
	echo
	echo "PerfExpert: Program execution #$((${index}+1)) of ${#experiment[@]}"
	cmd="${HPCTOOLKIT_BIN}/hpcrun ${experiment[${index}]} --output ${tempDir}/measurements ${program_name} ${arguments}"
	eval ${cmd}

	if [ ${debug} == "true" -a ${?} != "0" ]
	then
		echo
		echo "PerfExpert: Looks like the previous command failed to terminate cleanly, switching to debug mode..."

		rm -f ${debug_file}

		echo
		echo "PerfExpert: Collecting information about OS and processor..."

		uname -a >> ${debug_file} 2>&1
		echo >> ${debug_file}
		cat /proc/cpuinfo >> ${debug_file} 2>&1

		echo -e "Command: ${cmd}\n" >> ${debug_file}
		echo -e "run\nbt\nthread apply all bt\nquit" > ${tempDir}/stacktraces.cmd

		echo "PerfExpert: Collecting stack trace..."
		dbg_cmd="gdb --command=${tempDir}/stacktraces.cmd --args /bin/sh ${cmd} 2>> ${debug_file} 1>/dev/null"
		eval ${dbg_cmd}

		echo "PerfExpert: Collecting debug information from hpcrun monitor..."
		dbg_cmd="${HPCTOOLKIT_BIN}/hpcrun --monitor-debug ${experiment[${index}]} --output ${tempDir}/measurements ${program_name} ${arguments} 2>> ${debug_file} 1>/dev/null"
		echo -e "\nCommand: ${dbg_cmd}\n" >> ${debug_file}
		eval ${dbg_cmd}

		echo
		echo "PerfExpert: Debug information collected in ./${debug_file}, please send this file to the PerfExpert group for review. Thanks!"

		# Clean up
		rm -rf core ${tempDir}
		exit 1
	fi
done

echo
echo -n "PerfExpert: Finished all measurements, summarizing the results..."
${HPCTOOLKIT_BIN}/hpcprof --force-metric --metric=thread --struct ${tempDir}/hpcstruct --output ${tempDir}/database ${tempDir}/measurements &> ${tempDir}/hpcprof.message
returnCode=${?}

cat ${tempDir}/hpcprof.message >> perfexpert.log

if [ "x${returnCode}" != "x0" ]
then
	echo "error!"
	cat ${tempDir}/hpcprof.message

	# Clean up
	rm -rf ${tempDir}
else
	echo "done!"

	# Get the final experiment.xml here
	mv ${tempDir}/database/experiment.xml ./${output_filename}

	# Clean up
	rm -rf ${tempDir}

	echo "PerfExpert: Run the following command to analyze the measurement data:"
	echo "perfexpert <threshold-between-0-and-1> ./${output_filename}"
fi
